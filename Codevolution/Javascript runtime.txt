chrome comprises of 
--> JS engine (has the call stac and the memory to store variables)
--> Browser APIs (These include the DOM local storage, timer fxns, and promises )
--> Event Loop (ensures that tasks are executed in the correct order)
What is node js
- Allows use of javascript  outside the Browser
What can you build with node js
 - APIs
 -CMD tools
 - Multiplayer tools
 - Streaming services
 - Backend services
 - Real time applications
Node JS is comprises a JS library, built with C++ and has various dependencies
Does not have acess to the web API unlike the JS runtime
window and document objects cannot be found in the library
NODE REPL is the JS Read Evaluate Print Loop
similar to the rails console
difference between Browser and node
no modules in Browser
Browser APIs are noot available in node
Node.js has more freedom for dev
Modules in Node
- local
- Built-in
- Third Party (written by other devs)

The code is the same due to IIFE
In IFFE each variable has its own scope
BEfore execution a mudule is treated like an IIFE
This allows for encapsulation and reusability
//Module wrapper
The module wraper is used to covert the module code into an IIFE
thus a module looks like This
(
    function(exports, require, module, __filename, __dirname){
        module code
    }
)
the variables in the module wrapper are usually injected during execution by 
in the code the value of superhero is superman even if the exported value is batman because of module caching.
Module caching can be used to refere to the situation where a module is saved with its
When one object is assign to the other in JS both point to the same addres in memory thus the observed effect
Common JS
Each file is treated as a module
the module.exports tells which parts to exported
imorting is done using common JSES modules are a new version 
no module system when node was created
ES6 created a standard module system on 2006
The eky modules in node are
-- path - provides utilities for working with directories
-- Event
-- http
-- fs
-- stream
Callbacks in node
--> Used where functions can be used as arguments and can also be returned 
there are two types of Callbacks
--> Synchrounous - this is executed imidiately it is called such as the ones passed to the array methods sort map and filter methods.
and asynchrounous - used to resume code execution after an asynchrounous operation completes 
These are common in JS where some one if fetching data from a file, database, or making a network request
Event module allows as to work with events in javascript
Event refers to an action that happened in the application that one can reply to
Events module also allows us to dispatch custom events ad respond to them in a non blocking manner
AS seen in the use of different pizza and drink classes is that it is possible to used different classes without tight coupling
Character sets
encoding
Async JS
Streams and buffers
characters are fist converted to numbers then to their respective binary representation
character sets --> predefined character list rep by nums 
most common are unicode and ASCII
Character encoding --> describes how to represent as binary befor being stored into a computer
How many bits to be used to represent a number
Example is uTF-8 which sipulate that characters should be repped in bytes(in this case 8 bits to make a byte)
Thus in the case of 4 --> binary 100 --> unicode --> 00000100 
There are also guidlines on the storage of images and videos in binary format
Streams --> refers to data being moved from one point to the other
can bee within the computer, across internets and intranets
Node JS processes data in chunks and not waited to be wholly available
eg as when a video can be watched even if it is not fuully downloaded
Using chunks helps prevent unecessary downloads and ensuring that the data arrives in time
This helps prevent unecessary data downloads and memory use
buffers
It the wait zone that has a definite minimum and maximum data to be sent/processeed
Simply it a small area of the runtime that is maintained to process that data stream
For intance when the internet connection is fast the data stream will fill the buffer faster
The loading spiner on a video shows that it is waiting for more data to full the buffer so that it can send it
Buffer have limited memory thus when writing to the buffer only the characters that match the length will be written in the buffer
Buffers form the foundation for which node works
Asynch JS
JS is blocking and single threaded in its simplest form
A single thread can only handle one task at a time
New pieces beyond JS are required to write Asynch code
Browsers help that for the front-end and browsers for the backend
The browser and Node helps create functions that are invonked asynchronously when an event occurs
e.g in setTimeouts, event listeners, callbacks, promises 
the FS module
Streams and pipes
Although it works the same ase the read file the streaming wors best when working with big files
with big files files can be streams in chaunks while copying to a new file
Types of streams
--> readable streams for reading files (readable stream)
--> writable streams where we write (writable stream)
--> Duplex streams that are both writable and readable (sockets)
--> Transform streams that allow for reading and writing of data as it is being read (file compression)
Pipes
used to connect readable streams to writable streams 
Pipes allow chaining, However the destination stream must be readable dublex or transfom stream
http
How web works
Internet is comprised of clients and servers
clients include devices such as phones and browsers and their associated tools such as browsers
Servers are the stores of pages, websites, and web applications
when the start a request is sent from C->Servers
Server returns a response to be displayed in teh browser
HTTP defines the protocol for communication between the client and the servers
client --> HTTP request
sserver --> HTTP response
Node is used to create the web server
Node can allso acess os functionalities such as networing
Node event loop allows for the perfomance of a high volume of requests
node server should respect the http protocol
the creation of the http module allows for the creation of a server that can transfer data over http
using file streams leads to better usage of memory
Framewors such as react, angular and vue try to abstract lower lever code maing work easier
express nest happi and oa help one from directly interacting with the http module
they are build on top of the http module 
libuv--> cross platform library written in Callbacks
used to handle asynchronous non-blocing operations
It achieves them using the thread pool and event loop
Thread pool
Every method in node that runs with the sync suffix is usually on the main thred thus blocks other operations
ashycronous threads are made to run synchronously on separate threads but appear to be running synchronously to the main thread
Libuv has 5 threads. thus when more that five threads are running concurrently the fifth one has to wait for an empty thread
The perfomance of the application is improved by increasing the thread pool size
however this is limited to the number of cpu cores available in the computer
==> Observations from the code
--> Although crypto.pbkdf2 and http.request are asynchronous http request does not use the thread pool
--> Http request is not affected by the number of CPU cores
--> this is because https.request is network operation not a cpu bound operation
--> In this case libUV is involved in the assigning of the OS work to the kernel and polling the kernel to see if the task was completed
libuv handles methods asynch request through
-- Native mechanism
-- Thread pool
--> To avoid blocing the ain thread libuv tends to prefer native async mechanisms
--> Each kernel has different mechanisms
This helps make node scalable whereby the OS is the only limiting factor
--> The thread pool is usually used whereby there is no native support this help preventing the blocing of the
main thread
The thread pool can be a problem where aall the threads are busy
JS Event Loop
Node js comprises of the v8 engine and the libuv
The v8 engine has the memory heap and call stack
program exxecutions starts with global which is put into the stack
functions are added to the stack and removed once they have been excecuted
The Event loop is a C program that is part of of the libuv
A design pattern that cordinates the execution of asynchronous node.js code
--> Excecution order
-Execution of microtask queue
    - 1st in the nextTick then next in the promise queue
    - execution of callbacs in the timer queue
    - Execution of tasks in the microtask queue if present
    - execution of callbcks in the microtask queues
    - Execution of tasks in the microtask queue if present
    - excecution of callbacks in the check queue
    - Execution of tasks in the microtask queue if present
    xecution fo callbacks in the close queue
     Execution of tasks in the microtask queue if present
     if there are any more callbacks the process is repeated

Microtasks
The process.nextTick method is used to add CB to the nextTick queue
promise ques can be added with the promise.resolve.then((CB function)) method
use of process.nextick is discouraged as it may cause the rest of the event loop to starve
the prog may live in the microtask queue
when to use process.nextTick
error handling, reasource cleanup, retry request
Timer queue
--> one can use the setInterval or setTimeout functions
callbacs in the microtass are eval before callbacs in the timer queue
callbacs in the microtasks are excecuted between the callbacsk in the timer queue
setimeout are executed in a FIFO order with shortest excecuted first
the timer queue is a heap data structure
I/0 queue
I/O polling
The microtask que is usuallly executed in between the check queue callbacks




